# -*- coding: utf-8 -*-
"""synthesize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/as-ideas/ForwardTacotron/blob/master/notebooks/synthesize.ipynb

## Setup
"""

# Clone the repo including pretrained models
!git clone https://github.com/as-ideas/ForwardTacotron.git

# Commented out IPython magic to ensure Python compatibility.
# Install requirements
# %cd ForwardTacotron/  
!pip install -r requirements.txt

# Load pretrained models
from notebook_utils.synthesize import *
import IPython.display as ipd
init_hparams('notebook_utils/pretrained_hparams.py')
tts_model = get_forward_model('pretrained/forward_100K.pyt')
voc_model = get_wavernn_model('pretrained/wave_800K.pyt')

"""##Synthesize"""

# Synthesize with normal speed (alpha=1.0)
input_text = 'In the middle of difficulty lies opportunity.'
wav = synthesize(input_text, tts_model, voc_model, alpha=1.0)
ipd.Audio(wav, rate=hp.sample_rate)

# Synthesize with faster speed (alpha=1.5)
input_text = 'In the middle of difficulty lies opportunity.'
wav = synthesize(input_text, tts_model, voc_model, alpha=1.5)
ipd.Audio(wav, rate=hp.sample_rate)

# Synthesize with slower speed (alpha=0.7)
input_text = 'In the middle of difficulty lies opportunity.'
wav = synthesize(input_text, tts_model, voc_model, alpha=0.7)
ipd.Audio(wav, rate=hp.sample_rate)

# Synthesize with Griffin-Lim
input_text = '''Synthetic speech can be created by concatenating pieces of recorded speech that are stored in a database. 
Systems differ in the size of the stored speech units; a system that stores phones or diphones provides the largest output range, but may lack clarity. 
For specific usage domains, the storage of entire words or sentences allows for high-quality output. Alternatively, 
a synthesizer can incorporate a model of the vocal tract and other human voice characteristics to create a completely "synthetic" voice output.'''
wav = synthesize(input_text, tts_model, voc_model, alpha=1.0)
ipd.Audio(wav, rate=hp.sample_rate)